// Zed settings
//
// For information on how to configure Zed, see the Zed
// documentation: https://zed.dev/docs/configuring-zed
//
// To see all of Zed's default settings without changing your
// custom settings, run the `open default settings` command
// from the command palette or from `Zed` application menu.
// != ==
{
  "assistant": {
    "default_model": {
      "provider": "copilot_chat",
      "model": "gpt-4o"
    },
    "version": "2"
  },
  "vim_mode": true,
  "theme": "Ros√© Pine",
  "buffer_font_family": "Cascadia Code",
  "buffer_font_fetures": {
    "calt": true,
    "liga": true,
    "zero": true,
    "ss01": true,
    "ss02": true,
    "ss03": true,
    "ss04": true,
    "ss05": true,
    "ss06": true,
    "ss07": true,
    "ss08": true,
    "ss19": true,
    "ss20": true,
    "onum": true,
    "dlig": true
  },
  "buffer_font_size": 24,
  // disable cursor blink
  "cursor_blink": false,
  // hide the scroll bar
  "scrollbar": { "show": "never" },
  "relative_line_numbers": true,
  "vertical_scroll_margin": 0,
  "command_aliases": {
    "W": "w",
    "Wq": "wq",
    "Q": "q"
  },

  "autosave": "on_focus_change",
  "format_on_save": "on",

  "terminal": {
    "alternate_scroll": "off",
    "blinking": "terminal_controlled",
    "copy_on_select": true,
    "dock": "bottom",
    "font_family": "FiraCode Nerd Font",
    "option_as_meta": true,
    "button": false,
    "toolbar": {
      "title": true
    }
  },

  "inlay_hints": {
    "enabled": true,
    "show_type_hints": true,
    "show_parameter_hints": true,
    "show_other_hints": true
  },

  "lsp": {
    "rust-analyzer": {
      "initialization_options": {
        "check": {
          "command": "clippy" // rust-analyzer.check.command (default: "check")
        },
        "completion": {
          "snippets": {
            "custom": {
              "Arc::new": {
                "postfix": "arc",
                "body": ["Arc::new(${receiver})"],
                "requires": "std::sync::Arc",
                "scope": "expr"
              },
              "Some": {
                "postfix": "some",
                "body": ["Some(${receiver})"],
                "scope": "expr"
              },
              "Ok": {
                "postfix": "ok",
                "body": ["Ok(${receiver})"],
                "scope": "expr"
              },
              "Rc::new": {
                "postfix": "rc",
                "body": ["Rc::new(${receiver})"],
                "requires": "std::rc::Rc",
                "scope": "expr"
              },
              "Box::pin": {
                "postfix": "boxpin",
                "body": ["Box::pin(${receiver})"],
                "requires": "std::boxed::Box",
                "scope": "expr"
              },
              "vec!": {
                "postfix": "vec",
                "body": ["vec![${receiver}]"],
                "description": "vec![]",
                "scope": "expr"
              }
            }
          }
        }
      }
    }
  },

  "vim": {
    // "always": use system clipboard when no register is specified
    // "never": don't use system clipboard unless "+ or "* is specified
    // "on_yank": use system clipboard for yank operations when no register is specified
    "use_system_clipboard": "always",
    // Lets `f` and `t` motions extend across multiple lines
    "use_multiline_find": true
  }
}
